<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cloth Shop</title>
    <!-- Use Tailwind CSS for a modern, responsive design -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .container {
            max-width: 1280px;
            margin: 0 auto;
        }
        /* Custom animation for the auth page */
        @keyframes bounce-in {
            0% { transform: scale(0.8); opacity: 0; }
            50% { transform: scale(1.05); opacity: 1; }
            100% { transform: scale(1); opacity: 1; }
        }
        .animate-bounce-in {
            animation: bounce-in 0.5s ease-out forwards;
        }
        .main-content {
            min-height: calc(100vh - 88px); /* Account for header height */
        }
    </style>
</head>
<body class="bg-slate-50 font-sans antialiased">
    <!-- Main container where all dynamic content will be rendered -->
    <div id="app-container"></div>

    <script>
        // === GLOBAL STATE & DATA ===
        let isLoggedIn = false;
        let currentPage = 'home';
        let activeCategory = null;
        let selectedSubCategory = null;
        let cartItems = [];
        let registeredUsers = {};

        // Dummy product data
        const products = [
            { id: 1, name: 'Casual White Shirt', price: 49.99, category: 'Men', subCategory: 'Shirts', image: 'https://images.unsplash.com/photo-1596752002341-36f452d3d927?q=80&w=1920&auto=format&fit=crop' },
            { id: 2, name: 'Stylish Denim Jacket', price: 89.99, category: 'Women', subCategory: 'Tops', image: 'https://images.unsplash.com/photo-1542272301-ad26090c29f6?q=80&w=1920&auto=format&fit=crop' },
            { id: 3, name: 'Classic Black Trousers', price: 59.99, category: 'Men', subCategory: 'Trousers', image: 'https://images.unsplash.com/photo-1621243126786-21b330365775?q=80&w=1920&auto=format&fit=crop' },
            { id: 4, name: 'Elegant Maxi Dress', price: 129.99, category: 'Women', subCategory: 'Dresses', image: 'https://images.unsplash.com/photo-1582298687729-1a738410294d?q=80&w=1920&auto=format&fit=crop' },
            { id: 5, name: 'Kids Graphic Tee', price: 24.99, category: 'Children', subCategory: 'T-Shirts', image: 'https://images.unsplash.com/photo-1585487002016-1f92e4242630?q=80&w=1920&auto=format&fit=crop' },
            { id: 6, name: 'Leather Boots', price: 99.99, category: 'Men', subCategory: 'Accessories', image: 'https://images.unsplash.com/photo-1627384169724-4f01476a88e9?q=80&w=1920&auto=format&fit=crop' },
            { id: 7, name: 'Men\'s Ethnic Kurta', price: 79.99, category: 'Men', subCategory: 'Ethnic Wear', image: 'https://images.unsplash.com/photo-1625447101889-42b781f5c6e8?q=80&w=1920&auto=format&fit=crop' },
            { id: 8, name: 'Women\'s Ethnic Saree', price: 159.99, category: 'Women', subCategory: 'Ethnic Wear', image: 'https://images.unsplash.com/photo-1621243126786-21b330365775?q=80&w=1920&auto=format&fit=crop' },
            { id: 9, name: 'Dark Blue Slim Fit Jeans', price: 69.99, category: 'Men', subCategory: 'Jeans', image: 'https://i.imgur.com/K99aK6L.jpg' },
            { id: 10, name: 'Mid Blue Slim Fit Jeans', price: 74.99, category: 'Men', subCategory: 'Jeans', image: 'https://i.imgur.com/g8o4T7Y.jpg' },
            { id: 11, name: 'Dark Blue Ankle Fit Jeans', price: 69.99, category: 'Men', subCategory: 'Jeans', image: 'https://i.imgur.com/kS5x87t.jpg' },
            { id: 12, name: 'Off-White Printed T-Shirt', price: 34.99, category: 'Men', subCategory: 'T-Shirts', image: 'https://i.imgur.com/yv6G92W.jpg' },
            { id: 13, name: 'Navy Polo Shirt', price: 45.00, category: 'Men', subCategory: 'Shirts', image: 'https://images.unsplash.com/photo-1620799140408-edc6dcb6d633?q=80&w=1920&auto=format&fit=crop' },
            { id: 14, name: 'Light Wash Skinny Jeans', price: 72.00, category: 'Men', subCategory: 'Jeans', image: 'https://images.unsplash.com/photo-1604176354204-9268737828e4?q=80&w=1920&auto=format&fit=crop' },
            { id: 15, name: 'Graphic Band T-Shirt', price: 29.99, category: 'Men', subCategory: 'T-Shirts', image: 'https://images.unsplash.com/photo-1618677271927-4638a164f19b?q=80&w=1920&auto=format&fit=crop' },
            { id: 16, name: 'Women\'s Summer Skirt', price: 55.00, category: 'Women', subCategory: 'Skirts', image: 'https://images.unsplash.com/photo-1594966606019-21696b998a6f?q=80&w=1920&auto=format&fit=crop' },
        ];

        // Categories data
        const categories = {
            'Men': ['Shirts', 'Trousers', 'Ethnic Wear', 'Jeans', 'T-Shirts', 'Jackets', 'Accessories'],
            'Women': ['Dresses', 'Tops', 'Skirts', 'Ethnic Wear', 'Accessories'],
            'Children': ['T-Shirts', 'Jeans', 'Dresses', 'Playwear']
        };
        
        // Helper function to create HTML for a product card
        function createProductCard(product) {
            return `
                <div class="bg-white rounded-xl shadow-lg overflow-hidden transition-transform duration-300 hover:scale-105 hover:shadow-2xl">
                    <div class="relative overflow-hidden rounded-t-xl">
                        <img src="${product.image}" alt="${product.name}" class="w-full h-80 object-cover" />
                        <div class="absolute inset-0 bg-black bg-opacity-0 transition-opacity duration-300 hover:bg-opacity-10"></div>
                    </div>
                    <div class="p-5 text-center">
                        <h3 class="text-lg font-semibold text-slate-800 mb-1">${product.name}</h3>
                        <p class="text-gray-600 mb-4">$${product.price.toFixed(2)}</p>
                        <button 
                            data-product-id="${product.id}"
                            class="add-to-cart-btn w-full py-2 px-4 bg-slate-800 text-white font-medium rounded-lg hover:bg-slate-700 focus:outline-none focus:ring-4 focus:ring-slate-500 transition-colors duration-300"
                        >
                            Add to Cart
                        </button>
                    </div>
                </div>
            `;
        }

        // Helper function to create the mobile menu
        function createMobileMenu(isMobileMenuOpen) {
            if (!isMobileMenuOpen) return '';
            let menuHtml = `
                <nav class="lg:hidden bg-white shadow-lg pb-4">
                    <div class="flex flex-col items-center">
                        <button
                            class="w-full py-2 px-4 text-center text-lg font-medium text-gray-600 hover:bg-slate-100 transition-colors duration-200"
                            onclick="handleNavigation('home'); toggleMobileMenu(false);"
                        >
                            Home
                        </button>
            `;
            for (const categoryName in categories) {
                const isCurrentCat = activeCategory === categoryName;
                menuHtml += `
                    <div class="w-full">
                        <button
                            class="w-full py-2 px-4 text-center text-lg font-medium text-gray-600 hover:bg-slate-100 transition-colors duration-200"
                            onclick="toggleActiveCategory('${categoryName}')"
                        >
                            ${categoryName}
                        </button>
                        ${isCurrentCat ? `
                            <div class="flex flex-col items-center bg-gray-50 max-h-60 overflow-y-auto">
                                ${categories[categoryName].map(item => `
                                    <a
                                        href="#"
                                        onclick="handleNavigation('products', '${item}'); toggleMobileMenu(false);"
                                        class="block px-4 py-2 text-gray-700 hover:bg-slate-200 transition-colors duration-200"
                                    >
                                        ${item}
                                    </a>
                                `).join('')}
                            </div>
                        ` : ''}
                    </div>
                `;
            }
            menuHtml += `
                    </div>
                </nav>
            `;
            return menuHtml;
        }

        // === CORE LOGIC & RENDERING FUNCTIONS ===

        // Function to handle the authentication logic
        function handleAuth(event, isLoginMode) {
            event.preventDefault();
            const email = event.target.email.value;
            const password = event.target.password.value;
            let message = '';

            if (isLoginMode) {
                if (registeredUsers[email] && registeredUsers[email] === password) {
                    isLoggedIn = true;
                    message = 'Login successful!';
                    renderApp();
                } else {
                    message = 'Invalid email or password.';
                }
            } else {
                const confirmPassword = event.target.confirmPassword.value;
                if (password !== confirmPassword) {
                    message = 'Passwords do not match!';
                } else if (registeredUsers[email]) {
                    message = 'An account with this email already exists.';
                } else {
                    registeredUsers[email] = password;
                    message = 'Sign up successful!';
                    setTimeout(() => {
                        const authFormContainer = document.querySelector('#auth-form-container');
                        if (authFormContainer) authFormContainer.innerHTML = createAuthForm(true, 'Please log in with your new account.', 'info');
                    }, 2000);
                }
            }

            const authMessageDiv = document.querySelector('#auth-message');
            if (authMessageDiv) {
                authMessageDiv.textContent = message;
                authMessageDiv.className = `p-3 rounded-lg text-sm mb-4 text-center ${message.includes('successful') ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`;
                authMessageDiv.style.display = 'block';
            }
        }
        
        // Function to create the auth form HTML
        function createAuthForm(isLoginMode, message, messageType) {
            return `
                <div id="auth-form-container" class="w-full max-w-sm p-8 bg-white rounded-xl shadow-2xl transition-all duration-700 ease-out transform opacity-100 translate-y-0">
                    <h2 class="text-3xl font-bold text-center mb-6 text-slate-800">
                        ${isLoginMode ? 'Welcome Back!' : 'Create an Account'}
                    </h2>
                    ${message ? `<div id="auth-message" class="p-3 rounded-lg text-sm mb-4 text-center ${messageType === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}">${message}</div>` : `<div id="auth-message" class="hidden"></div>`}
                    <form onsubmit="handleAuth(event, ${isLoginMode})">
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                <input type="email" name="email" placeholder="you@example.com" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" required />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                                <input type="password" name="password" placeholder="Password" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" required />
                            </div>
                            ${!isLoginMode ? `
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                                    <input type="password" name="confirmPassword" placeholder="Confirm Password" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" required />
                                </div>
                            ` : ''}
                            <button type="submit" class="w-full py-3 mt-6 text-white font-semibold rounded-lg bg-slate-800 hover:bg-slate-700 focus:outline-none focus:ring-4 focus:ring-slate-500 transition duration-300 transform hover:-translate-y-1">
                                ${isLoginMode ? 'Login' : 'Sign Up'}
                            </button>
                        </div>
                    </form>
                    <p class="mt-4 text-center text-sm text-gray-600">
                        ${isLoginMode ? "Don't have an account?" : "Already have an account?"}
                        <span onclick="renderAuthPage(${!isLoginMode})" class="font-semibold text-blue-600 cursor-pointer hover:text-blue-500 ml-1 transition-colors duration-200">
                            ${isLoginMode ? 'Sign Up' : 'Login'}
                        </span>
                    </p>
                </div>
            `;
        }

        // Function to render the authentication page
        function renderAuthPage(isLoginMode = true) {
            const appContainer = document.getElementById('app-container');
            appContainer.innerHTML = `
                <div class="flex items-center justify-center min-h-screen bg-slate-100 p-4">
                    ${createAuthForm(isLoginMode)}
                </div>
            `;
            setTimeout(() => {
                const authFormContainer = document.querySelector('#auth-form-container');
                if (authFormContainer) authFormContainer.classList.add('animate-bounce-in');
            }, 100);
        }

        // Function to add a product to the cart
        function addToCart(productId) {
            const productToAdd = products.find(p => p.id === parseInt(productId));
            if (!productToAdd) return;
            
            const existingItem = cartItems.find(item => item.id === productToAdd.id);
            if (existingItem) {
                cartItems = cartItems.map(item =>
                    item.id === productToAdd.id ? { ...item, quantity: item.quantity + 1 } : item
                );
            } else {
                cartItems = [...cartItems, { ...productToAdd, quantity: 1 }];
            }
            updateCartCount();
        }

        // Function to remove a product from the cart
        function removeFromCart(productId) {
            cartItems = cartItems.filter(item => item.id !== productId);
            updateCartCount();
            renderCartPage();
        }

        // Function to update the quantity of a cart item
        function updateQuantity(productId, newQuantity) {
            if (newQuantity <= 0) {
                removeFromCart(productId);
                return;
            }
            cartItems = cartItems.map(item =>
                item.id === productId ? { ...item, quantity: newQuantity } : item
            );
            updateCartCount();
            renderCartPage();
        }

        // Function to update the cart count in the header
        function updateCartCount() {
            const cartCountElement = document.getElementById('cart-count');
            const totalCount = cartItems.reduce((total, item) => total + item.quantity, 0);
            if (cartCountElement) {
                cartCountElement.textContent = totalCount;
            }
        }

        // Function to handle page navigation
        function handleNavigation(page, subCategory = null) {
            currentPage = page;
            selectedSubCategory = subCategory;
            renderApp();
        }

        // Function to toggle the mobile menu
        function toggleMobileMenu(forceState = null) {
            const mobileMenu = document.getElementById('mobile-menu');
            if (mobileMenu) {
                mobileMenu.classList.toggle('hidden', forceState !== null ? !forceState : null);
            }
        }
        
        // Function to toggle the active category for the dropdown
        function toggleActiveCategory(categoryName) {
            activeCategory = activeCategory === categoryName ? null : categoryName;
            renderHeader(); // Re-render the header to show/hide the dropdown
        }
        
        // Function to clear cart and navigate to home after a successful order
        function clearCart() {
            cartItems = [];
            handleNavigation('home');
        }

        // Main rendering function that decides which page to show
        function renderApp() {
            const appContainer = document.getElementById('app-container');
            let contentHtml = '';

            // Render header if logged in
            if (isLoggedIn) {
                let isMobileMenuOpen = document.querySelector('.mobile-menu:not(.hidden)') ? true : false;
                
                let headerHtml = `
                    <header class="sticky top-0 z-50 bg-white shadow-lg">
                        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
                            <div class="text-2xl font-extrabold text-slate-800 cursor-pointer" onclick="handleNavigation('home')">
                                Cloth Shop
                            </div>
                            <nav class="hidden lg:flex items-center space-x-8">
                                <button onclick="handleNavigation('home')" class="text-gray-600 hover:text-gray-900 transition-colors duration-200 text-lg font-medium">
                                    Home
                                </button>
                                ${Object.keys(categories).map((categoryName) => `
                                    <div class="relative group" onmouseenter="activeCategory = '${categoryName}'; renderHeader();" onmouseleave="activeCategory = null; renderHeader();">
                                        <a href="#" class="text-gray-600 hover:text-gray-900 transition-colors duration-200 text-lg font-medium">
                                            ${categoryName}
                                        </a>
                                        ${activeCategory === categoryName ? `
                                            <div class="absolute left-0 top-full mt-2 w-48 bg-white rounded-lg shadow-xl py-2 z-10 max-h-60 overflow-y-auto">
                                                ${categories[categoryName].map((item) => `
                                                    <a href="#" onclick="handleNavigation('products', '${item}')" class="block px-4 py-2 text-gray-700 hover:bg-slate-100 transition-colors duration-200">
                                                        ${item}
                                                    </a>
                                                `).join('')}
                                            </div>
                                        ` : ''}
                                    </div>
                                `).join('')}
                            </nav>
                            <div class="flex items-center space-x-4">
                                <button onclick="handleNavigation('cart')" class="relative p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shopping-cart">
                                        <circle cx="8" cy="21" r="1" /><circle cx="19" cy="21" r="1" /><path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
                                    </svg>
                                    <span id="cart-count" class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">
                                        ${cartItems.reduce((total, item) => total + item.quantity, 0)}
                                    </span>
                                </button>
                                <button onclick="toggleMobileMenu()" class="lg:hidden p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-menu">
                                        <line x1="4" x2="20" y1="12" y2="12" /><line x1="4" x2="20" y1="6" y2="6" /><line x1="4" x2="20" y1="18" y2="18" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <nav id="mobile-menu" class="lg:hidden bg-white shadow-lg pb-4 ${isMobileMenuOpen ? '' : 'hidden'}">
                            <div class="flex flex-col items-center">
                                <button
                                    onclick="handleNavigation('home'); toggleMobileMenu(false);"
                                    class="w-full py-2 px-4 text-center text-lg font-medium text-gray-600 hover:bg-slate-100 transition-colors duration-200"
                                >
                                    Home
                                </button>
                                ${Object.keys(categories).map((categoryName) => `
                                    <div class="w-full">
                                        <button
                                            onclick="activeCategory = (activeCategory === '${categoryName}' ? null : '${categoryName}'); renderApp();"
                                            class="w-full py-2 px-4 text-center text-lg font-medium text-gray-600 hover:bg-slate-100 transition-colors duration-200"
                                        >
                                            ${categoryName}
                                        </button>
                                        ${activeCategory === categoryName ? `
                                            <div class="flex flex-col items-center bg-gray-50 max-h-60 overflow-y-auto">
                                                ${categories[categoryName].map((item) => `
                                                    <a href="#" onclick="handleNavigation('products', '${item}'); toggleMobileMenu(false);" class="block px-4 py-2 text-gray-700 hover:bg-slate-200 transition-colors duration-200">
                                                        ${item}
                                                    </a>
                                                `).join('')}
                                            </div>
                                        ` : ''}
                                    </div>
                                `).join('')}
                            </div>
                        </nav>
                    </header>
                `;
                appContainer.innerHTML = headerHtml;
                const mainContent = document.createElement('main');
                appContainer.appendChild(mainContent);
                switch (currentPage) {
                    case 'home':
                        renderHomePage(mainContent);
                        break;
                    case 'products':
                        renderProductListPage(mainContent);
                        break;
                    case 'cart':
                        renderCartPage(mainContent);
                        break;
                    case 'checkout':
                        renderCheckoutPage(mainContent);
                        break;
                }
            } else {
                renderAuthPage();
            }
            addGlobalListeners();
        }

        // Function to re-render just the header to handle dropdowns without a full page refresh
        function renderHeader() {
            if (!isLoggedIn) return; // Only render header if logged in
            const appContainer = document.getElementById('app-container');
            const mainContent = appContainer.querySelector('main');
            let isMobileMenuOpen = document.getElementById('mobile-menu')?.classList.contains('hidden') === false;

            const headerHtml = `
                <header class="sticky top-0 z-50 bg-white shadow-lg">
                    <div class="container mx-auto px-4 py-4 flex justify-between items-center">
                        <div class="text-2xl font-extrabold text-slate-800 cursor-pointer" onclick="handleNavigation('home')">
                            Cloth Shop
                        </div>
                        <nav class="hidden lg:flex items-center space-x-8">
                            <button onclick="handleNavigation('home')" class="text-gray-600 hover:text-gray-900 transition-colors duration-200 text-lg font-medium">
                                Home
                            </button>
                            ${Object.keys(categories).map((categoryName) => `
                                <div class="relative" onmouseenter="activeCategory = '${categoryName}'; renderHeader();" onmouseleave="activeCategory = null; renderHeader();">
                                    <a href="#" class="text-gray-600 hover:text-gray-900 transition-colors duration-200 text-lg font-medium">
                                        ${categoryName}
                                    </a>
                                    ${activeCategory === categoryName ? `
                                        <div class="absolute left-0 top-full mt-2 w-48 bg-white rounded-lg shadow-xl py-2 z-10 max-h-60 overflow-y-auto">
                                            ${categories[categoryName].map((item) => `
                                                <a href="#" onclick="handleNavigation('products', '${item}')" class="block px-4 py-2 text-gray-700 hover:bg-slate-100 transition-colors duration-200">
                                                    ${item}
                                                </a>
                                            `).join('')}
                                        </div>
                                    ` : ''}
                                </div>
                            `).join('')}
                        </nav>
                        <div class="flex items-center space-x-4">
                            <button onclick="handleNavigation('cart')" class="relative p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shopping-cart">
                                    <circle cx="8" cy="21" r="1" /><circle cx="19" cy="21" r="1" /><path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
                                </svg>
                                <span id="cart-count" class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">
                                    ${cartItems.reduce((total, item) => total + item.quantity, 0)}
                                </span>
                            </button>
                            <button onclick="toggleMobileMenu()" class="lg:hidden p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-menu">
                                    <line x1="4" x2="20" y1="12" y2="12" /><line x1="4" x2="20" y1="6" y2="6" /><line x1="4" x2="20" y1="18" y2="18" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <nav id="mobile-menu" class="lg:hidden bg-white shadow-lg pb-4 ${isMobileMenuOpen ? '' : 'hidden'}">
                        <div class="flex flex-col items-center">
                            <button
                                onclick="handleNavigation('home'); toggleMobileMenu(false);"
                                class="w-full py-2 px-4 text-center text-lg font-medium text-gray-600 hover:bg-slate-100 transition-colors duration-200"
                            >
                                Home
                            </button>
                            ${Object.keys(categories).map((categoryName) => `
                                <div class="w-full">
                                    <button
                                        onclick="activeCategory = (activeCategory === '${categoryName}' ? null : '${categoryName}'); renderHeader();"
                                        class="w-full py-2 px-4 text-center text-lg font-medium text-gray-600 hover:bg-slate-100 transition-colors duration-200"
                                    >
                                        ${categoryName}
                                    </button>
                                    ${activeCategory === categoryName ? `
                                        <div class="flex flex-col items-center bg-gray-50 max-h-60 overflow-y-auto">
                                            ${categories[categoryName].map((item) => `
                                                <a href="#" onclick="handleNavigation('products', '${item}'); toggleMobileMenu(false);" class="block px-4 py-2 text-gray-700 hover:bg-slate-200 transition-colors duration-200">
                                                    ${item}
                                                </a>
                                            `).join('')}
                                        </div>
                                    ` : ''}
                                </div>
                            `).join('')}
                        </div>
                    </nav>
                </header>
            `;

            const headerElement = appContainer.querySelector('header');
            if (headerElement) {
                headerElement.outerHTML = headerHtml;
            }
        }

        // Home Page Rendering
        function renderHomePage(container) {
            const mensWear = products.filter(p => p.category === 'Men');
            const trendingItems = [...products].sort(() => 0.5 - Math.random()).slice(0, 4);

            const heroHtml = `
                <section class="relative w-full h-96 lg:h-[600px] flex items-center justify-center p-4 text-center bg-cover bg-center rounded-b-3xl overflow-hidden" style="background-image: url('https://images.unsplash.com/photo-1512436991641-6745cdb1723f?q=80&w=1920&auto=format&fit=crop')">
                    <div class="absolute inset-0 bg-black opacity-30"></div>
                    <div class="relative z-10 flex flex-col items-center text-white">
                        <h1 class="text-4xl sm:text-5xl md:text-6xl font-bold leading-tight drop-shadow-lg">
                            Elevate Your Style
                        </h1>
                    </div>
                </section>
            `;
            
            const menSectionHtml = `
                <section class="container mx-auto px-4 py-12">
                    <h2 class="text-3xl font-bold text-center mb-8 text-slate-800">Men's New Arrivals</h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                        ${mensWear.map(createProductCard).join('')}
                    </div>
                </section>
            `;

            const featuredProducts = products.filter(p => p.id === 1 || p.id === 4 || p.id === 7 || p.id === 9);
            const featuredSectionHtml = `
                <section class="container mx-auto px-4 py-12">
                    <h2 class="text-3xl font-bold text-center mb-8 text-slate-800">Featured Collections</h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                        ${featuredProducts.map(createProductCard).join('')}
                    </div>
                </section>
            `;

            const trendingSectionHtml = `
                <section class="container mx-auto px-4 py-12 bg-slate-100 rounded-xl shadow-inner">
                    <h2 class="text-3xl font-bold text-center mb-8 text-slate-800">Trending Now</h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                        ${trendingItems.map(createProductCard).join('')}
                    </div>
                </section>
            `;

            container.innerHTML = heroHtml + menSectionHtml + featuredSectionHtml + trendingSectionHtml;
        }

        // Product List Page Rendering
        function renderProductListPage(container) {
            const filteredProducts = products.filter(p => p.subCategory === selectedSubCategory);
            const productListHtml = `
                <section class="container mx-auto px-4 py-12">
                    <h2 class="text-3xl font-bold text-center mb-8 text-slate-800">
                        ${selectedSubCategory}
                    </h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                        ${filteredProducts.map(createProductCard).join('')}
                    </div>
                </section>
            `;
            container.innerHTML = productListHtml;
        }

        // Cart Page Rendering
        function renderCartPage(container) {
            const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
            const cartHtml = `
                <section class="container mx-auto px-4 py-12">
                    <h2 class="text-3xl font-bold text-center mb-8 text-slate-800">Shopping Cart</h2>
                    ${cartItems.length === 0 ? `
                        <p class="text-center text-gray-500">Your cart is empty.</p>
                    ` : `
                        <div class="bg-white rounded-xl shadow-lg overflow-hidden p-6">
                            <ul class="divide-y divide-gray-200">
                                ${cartItems.map(item => `
                                    <li class="flex flex-col sm:flex-row items-center py-4">
                                        <img src="${item.image}" alt="${item.name}" class="w-24 h-24 object-cover rounded-md flex-shrink-0" />
                                        <div class="flex-1 mt-4 sm:mt-0 sm:ml-6">
                                            <h3 class="text-lg font-semibold text-slate-800">${item.name}</h3>
                                            <p class="text-gray-600">$${item.price.toFixed(2)}</p>
                                        </div>
                                        <div class="flex items-center mt-4 sm:mt-0">
                                            <button 
                                                class="update-quantity-btn px-3 py-1 bg-gray-200 text-gray-800 rounded-l-md font-bold hover:bg-gray-300 transition-colors"
                                                data-product-id="${item.id}"
                                                data-action="decrement"
                                            >
                                                -
                                            </button>
                                            <span class="px-4 py-1 bg-gray-100 text-gray-800 font-medium">
                                                ${item.quantity}
                                            </span>
                                            <button 
                                                class="update-quantity-btn px-3 py-1 bg-gray-200 text-gray-800 rounded-r-md font-bold hover:bg-gray-300 transition-colors"
                                                data-product-id="${item.id}"
                                                data-action="increment"
                                            >
                                                +
                                            </button>
                                        </div>
                                        <div class="text-lg font-semibold text-slate-800 mt-4 sm:mt-0 sm:ml-6 w-32 text-right">
                                            $${(item.price * item.quantity).toFixed(2)}
                                        </div>
                                        <button 
                                            class="remove-from-cart-btn mt-4 sm:mt-0 sm:ml-6 text-red-500 hover:text-red-700 transition-colors"
                                            data-product-id="${item.id}"
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x-circle"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>
                                        </button>
                                    </li>
                                `).join('')}
                            </ul>
                            <div class="flex justify-between items-center pt-6 mt-6 border-t border-gray-200">
                                <h3 class="text-2xl font-bold text-slate-800">Total</h3>
                                <span class="text-2xl font-bold text-slate-800">$${total.toFixed(2)}</span>
                            </div>
                            <div class="flex justify-end mt-6">
                                <button
                                    onclick="handleNavigation('checkout')"
                                    class="px-8 py-3 bg-slate-800 text-white rounded-lg font-semibold shadow-lg hover:bg-slate-700 transition-transform duration-300 transform hover:-translate-y-1"
                                >
                                    Proceed to Checkout
                                </button>
                            </div>
                        </div>
                    `}
                </section>
            `;
            container.innerHTML = cartHtml;
        }

        // Checkout Page Rendering
        function renderCheckoutPage(container) {
            const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
            let paymentMethod = 'credit_card';
            let isOrdering = false;

            const checkoutHtml = `
                <section class="container mx-auto px-4 py-12">
                    <h2 class="text-3xl font-bold text-center mb-8 text-slate-800">Checkout</h2>
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        <div class="lg:col-span-1 bg-white p-6 rounded-xl shadow-lg">
                            <h3 class="text-2xl font-bold text-slate-800 mb-4">Order Summary</h3>
                            <ul class="divide-y divide-gray-200">
                                ${cartItems.map(item => `
                                    <li class="flex justify-between items-center py-2">
                                        <span class="text-gray-600">${item.name} (x${item.quantity})</span>
                                        <span class="font-medium text-slate-800">$${(item.price * item.quantity).toFixed(2)}</span>
                                    </li>
                                `).join('')}
                            </ul>
                            <div class="flex justify-between items-center pt-4 mt-4 border-t border-gray-200">
                                <h3 class="text-xl font-bold text-slate-800">Total</h3>
                                <span class="text-xl font-bold text-slate-800">$${total.toFixed(2)}</span>
                            </div>
                        </div>
                        <div class="lg:col-span-2 bg-white p-6 rounded-xl shadow-lg">
                            <h3 class="text-2xl font-bold text-slate-800 mb-4">Shipping & Payment</h3>
                            <form id="checkout-form" onsubmit="handleCheckout(event)">
                                <div class="space-y-6">
                                    <div>
                                        <h4 class="font-semibold text-lg text-slate-800 mb-2">Shipping Address</h4>
                                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <input type="text" placeholder="Full Name" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                                            <input type="text" placeholder="Address Line 1" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                                            <input type="text" placeholder="City" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                                            <input type="text" placeholder="State / Province" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                                            <input type="text" placeholder="Zip / Postal Code" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                                            <input type="text" placeholder="Country" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                                        </div>
                                    </div>
                                    <div>
                                        <h4 class="font-semibold text-lg text-slate-800 mb-2">Payment Method</h4>
                                        <div class="flex flex-col space-y-2">
                                            <label class="flex items-center space-x-2">
                                                <input type="radio" name="payment" value="credit_card" checked class="form-radio text-blue-600" />
                                                <span>Credit Card</span>
                                            </label>
                                            <label class="flex items-center space-x-2">
                                                <input type="radio" name="payment" value="paypal" class="form-radio text-blue-600" />
                                                <span>PayPal</span>
                                            </label>
                                            <label class="flex items-center space-x-2">
                                                <input type="radio" name="payment" value="qr_code" class="form-radio text-blue-600" />
                                                <span>QR Code</span>
                                            </label>
                                            <label class="flex items-center space-x-2">
                                                <input type="radio" name="payment" value="cash_on_delivery" class="form-radio text-blue-600" />
                                                <span>Cash on Delivery</span>
                                            </label>
                                        </div>
                                    </div>
                                    <div id="qr-code-section" class="hidden flex-col items-center justify-center p-4 bg-gray-50 rounded-lg shadow-inner">
                                        <p class="text-gray-600 mb-4">Please scan the QR code to complete your payment.</p>
                                        <img src="https://i.imgur.com/uG90s4O.png" alt="QR Code" class="w-48 h-48 rounded-lg" />
                                    </div>
                                    <button
                                        type="submit"
                                        id="place-order-btn"
                                        class="w-full py-3 mt-6 text-white font-semibold rounded-lg bg-slate-800 hover:bg-slate-700 focus:outline-none focus:ring-4 focus:ring-slate-500 transition duration-300 transform hover:-translate-y-1"
                                    >
                                        Place Order
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </section>
                <div id="order-success-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white p-8 rounded-xl shadow-2xl text-center max-w-md w-full animate-bounce-in">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-green-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <h3 class="text-2xl font-bold text-slate-800 mb-2">Order Placed!</h3>
                        <p class="text-gray-600">Thank you for your purchase. We'll send you a confirmation email shortly.</p>
                    </div>
                </div>
            `;

            container.innerHTML = checkoutHtml;

            // Add listener for payment method change
            document.querySelectorAll('input[name="payment"]').forEach(radio => {
                radio.addEventListener('change', (e) => {
                    const qrSection = document.getElementById('qr-code-section');
                    if (e.target.value === 'qr_code') {
                        qrSection.classList.remove('hidden');
                        qrSection.classList.add('flex');
                    } else {
                        qrSection.classList.add('hidden');
                        qrSection.classList.remove('flex');
                    }
                });
            });
        }

        function handleCheckout(event) {
            event.preventDefault();
            const placeOrderBtn = document.getElementById('place-order-btn');
            const successModal = document.getElementById('order-success-modal');

            placeOrderBtn.disabled = true;
            placeOrderBtn.textContent = 'Placing Order...';
            
            setTimeout(() => {
                successModal.classList.remove('hidden');
                setTimeout(() => {
                    clearCart();
                }, 2000);
            }, 1000);
        }

        // Global event listeners (delegation)
        function addGlobalListeners() {
            document.body.addEventListener('click', (e) => {
                // Add to Cart button
                if (e.target.classList.contains('add-to-cart-btn')) {
                    const productId = e.target.getAttribute('data-product-id');
                    addToCart(productId);
                }
                // Remove from Cart button
                if (e.target.classList.contains('remove-from-cart-btn')) {
                    const productId = parseInt(e.target.getAttribute('data-product-id'));
                    removeFromCart(productId);
                }
                // Update quantity buttons
                if (e.target.classList.contains('update-quantity-btn')) {
                    const productId = parseInt(e.target.getAttribute('data-product-id'));
                    const action = e.target.getAttribute('data-action');
                    const item = cartItems.find(i => i.id === productId);
                    if (item) {
                        const newQuantity = action === 'increment' ? item.quantity + 1 : item.quantity - 1;
                        updateQuantity(productId, newQuantity);
                    }
                }
            });
        }

        // Initial render based on login state
        document.addEventListener('DOMContentLoaded', () => {
            renderApp();
        });
    </script>
</body>
</html>
