import { useState, useEffect } from 'react';

// Main App component that manages the page state
export default function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [activeCategory, setActiveCategory] = useState(null);
  // New state to manage the current page being displayed
  const [currentPage, setCurrentPage] = useState('home');
  // New state to hold the selected sub-category for filtering
  const [selectedSubCategory, setSelectedSubCategory] = useState(null);
  // State for managing the shopping cart
  const [cartItems, setCartItems] = useState([]);
  // State to store registered user data
  const [registeredUsers, setRegisteredUsers] = useState({});

  // Dummy product data with appropriate images
  const products = [
    { id: 1, name: 'Casual White Shirt', price: 49.99, category: 'Men', subCategory: 'Shirts', image: 'https://images.unsplash.com/photo-1596752002341-36f452d3d927?q=80&w=1920&auto=format&fit=crop' },
    { id: 2, name: 'Stylish Denim Jacket', price: 89.99, category: 'Women', subCategory: 'Tops', image: 'https://images.unsplash.com/photo-1542272301-ad26090c29f6?q=80&w=1920&auto=format&fit=crop' },
    { id: 3, name: 'Classic Black Trousers', price: 59.99, category: 'Men', subCategory: 'Trousers', image: 'https://images.unsplash.com/photo-1621243126786-21b330365775?q=80&w=1920&auto=format&fit=crop' },
    { id: 4, name: 'Elegant Maxi Dress', price: 129.99, category: 'Women', subCategory: 'Dresses', image: 'https://images.unsplash.com/photo-1582298687729-1a738410294d?q=80&w=1920&auto=format&fit=crop' },
    { id: 5, name: 'Kids Graphic Tee', price: 24.99, category: 'Children', subCategory: 'T-Shirts', image: 'https://images.unsplash.com/photo-1585487002016-1f92e4242630?q=80&w=1920&auto=format&fit=crop' },
    { id: 6, name: 'Leather Boots', price: 99.99, category: 'Men', subCategory: 'Accessories', image: 'https://images.unsplash.com/photo-1627384169724-4f01476a88e9?q=80&w=1920&auto=format&fit=crop' },
    { id: 7, name: 'Men\'s Ethnic Kurta', price: 79.99, category: 'Men', subCategory: 'Ethnic Wear', image: 'https://images.unsplash.com/photo-1625447101889-42b781f5c6e8?q=80&w=1920&auto=format&fit=crop' },
    { id: 8, name: 'Women\'s Ethnic Saree', price: 159.99, category: 'Women', subCategory: 'Ethnic Wear', image: 'https://images.unsplash.com/photo-1621243126786-21b330365775?q=80&w=1920&auto=format&fit=crop' },
    { id: 9, name: 'Dark Blue Slim Fit Jeans', price: 69.99, category: 'Men', subCategory: 'Jeans', image: 'https://i.imgur.com/K99aK6L.jpg' },
    { id: 10, name: 'Mid Blue Slim Fit Jeans', price: 74.99, category: 'Men', subCategory: 'Jeans', image: 'https://i.imgur.com/g8o4T7Y.jpg' },
    { id: 11, name: 'Dark Blue Ankle Fit Jeans', price: 69.99, category: 'Men', subCategory: 'Jeans', image: 'https://i.imgur.com/kS5x87t.jpg' },
    { id: 12, name: 'Off-White Printed T-Shirt', price: 34.99, category: 'Men', subCategory: 'T-Shirts', image: 'https://i.imgur.com/yv6G92W.jpg' },
    // More products for variety with appropriate photos
    { id: 13, name: 'Navy Polo Shirt', price: 45.00, category: 'Men', subCategory: 'Shirts', image: 'https://images.unsplash.com/photo-1620799140408-edc6dcb6d633?q=80&w=1920&auto=format&fit=crop' },
    { id: 14, name: 'Light Wash Skinny Jeans', price: 72.00, category: 'Men', subCategory: 'Jeans', image: 'https://images.unsplash.com/photo-1604176354204-9268737828e4?q=80&w=1920&auto=format&fit=crop' },
    { id: 15, name: 'Graphic Band T-Shirt', price: 29.99, category: 'Men', subCategory: 'T-Shirts', image: 'https://images.unsplash.com/photo-1618677271927-4638a164f19b?q=80&w=1920&auto=format&fit=crop' },
    { id: 16, name: 'Women\'s Summer Skirt', price: 55.00, category: 'Women', subCategory: 'Skirts', image: 'https://images.unsplash.com/photo-1594966606019-21696b998a6f?q=80&w=1920&auto=format&fit=crop' },
  ];

  // The new authentication handler that uses a state to store user data
  const handleAuth = (e, email, password, confirmPassword, isLoginMode) => {
    e.preventDefault();

    if (isLoginMode) {
      if (registeredUsers[email] && registeredUsers[email] === password) {
        setIsLoggedIn(true);
        return 'Login successful!';
      } else {
        return 'Invalid email or password.';
      }
    } else {
      if (password !== confirmPassword) {
        return 'Passwords do not match!';
      }
      if (registeredUsers[email]) {
        return 'An account with this email already exists.';
      }
      setRegisteredUsers(prevUsers => ({ ...prevUsers, [email]: password }));
      return 'Sign up successful!';
    }
  };


  const handleNavigation = (page, subCategory = null) => {
    setCurrentPage(page);
    setSelectedSubCategory(subCategory);
  };

  // Add a product to the cart or update its quantity
  const addToCart = (productToAdd) => {
    setCartItems(prevItems => {
      const existingItem = prevItems.find(item => item.id === productToAdd.id);
      if (existingItem) {
        return prevItems.map(item =>
          item.id === productToAdd.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        return [...prevItems, { ...productToAdd, quantity: 1 }];
      }
    });
  };

  // Remove a product from the cart
  const removeFromCart = (productId) => {
    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));
  };

  // Update the quantity of a product in the cart
  const updateQuantity = (productId, newQuantity) => {
    setCartItems(prevItems => {
      if (newQuantity <= 0) {
        return prevItems.filter(item => item.id !== productId);
      }
      return prevItems.map(item =>
        item.id === productId ? { ...item, quantity: newQuantity } : item
      );
    });
  };

  // Function to clear the cart and navigate to home after a successful order
  const clearCart = () => {
    setCartItems([]);
    handleNavigation('home');
  };

  // Updated categories with more options
  const categories = {
    'Men': ['Shirts', 'Trousers', 'Ethnic Wear', 'Jeans', 'T-Shirts', 'Jackets', 'Accessories'],
    'Women': ['Dresses', 'Tops', 'Skirts', 'Ethnic Wear', 'Accessories'],
    'Children': ['T-Shirts', 'Jeans', 'Dresses', 'Playwear']
  };

  // Conditionally render the correct page based on state
  const renderPage = () => {
    switch (currentPage) {
      case 'home':
        return <HomePage products={products} handleNavigation={handleNavigation} addToCart={addToCart} />;
      case 'products':
        // Filter products based on the selected subCategory
        const filteredProducts = products.filter(p => p.subCategory === selectedSubCategory);
        return <ProductListPage products={filteredProducts} title={selectedSubCategory} addToCart={addToCart} />;
      case 'cart':
        return <CartPage cartItems={cartItems} removeFromCart={removeFromCart} updateQuantity={updateQuantity} handleNavigation={handleNavigation} />;
      case 'checkout':
        return <CheckoutPage cartItems={cartItems} onPlaceOrder={clearCart} />;
      default:
        return <HomePage products={products} handleNavigation={handleNavigation} addToCart={addToCart} />;
    }
  };

  if (!isLoggedIn) {
    return <AuthPage handleAuth={handleAuth} />;
  }

  return (
    <div className="bg-slate-50 min-h-screen font-sans antialiased">
      <Header
        categories={categories}
        activeCategory={activeCategory}
        setActiveCategory={setActiveCategory}
        onNavigate={handleNavigation}
        cartItemCount={cartItems.reduce((total, item) => total + item.quantity, 0)}
      />
      <main>
        {renderPage()}
      </main>
    </div>
  );
}

// Authentication Page (Login and Sign Up)
function AuthPage({ handleAuth }) {
  const [isLoginMode, setIsLoginMode] = useState(true);
  const [isLoaded, setIsLoaded] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');

  // Trigger fade-in animation on component mount
  useEffect(() => {
    setIsLoaded(true);
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    setMessage(''); // Clear previous messages
    const authResult = handleAuth(e, email, password, confirmPassword, isLoginMode);
    if (typeof authResult === 'string') {
      if (authResult.includes('successful')) {
        setMessage(authResult);
        setMessageType('success');
        if (!isLoginMode) {
          // If signup is successful, switch to login mode for the user to proceed
          setTimeout(() => {
            setIsLoginMode(true);
            setMessage('Please log in with your new account.');
            setMessageType('info');
          }, 2000);
        }
      } else {
        setMessage(authResult);
        setMessageType('error');
      }
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-slate-100 p-4">
      <div
        className={`w-full max-w-sm p-8 bg-white rounded-xl shadow-2xl transition-all duration-700 ease-out transform
          ${isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}
      >
        <h2 className="text-3xl font-bold text-center mb-6 text-slate-800">
          {isLoginMode ? 'Welcome Back!' : 'Create an Account'}
        </h2>
        {message && (
          <div className={`p-3 rounded-lg text-sm mb-4 text-center ${messageType === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
            {message}
          </div>
        )}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input
              type="email"
              placeholder="you@example.com"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <input
              type="password"
              placeholder="Password"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          {!isLoginMode && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
              <input
                type="password"
                placeholder="Confirm Password"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
              />
            </div>
          )}
          <button
            type="submit"
            className="w-full py-3 mt-6 text-white font-semibold rounded-lg bg-slate-800 hover:bg-slate-700 focus:outline-none focus:ring-4 focus:ring-slate-500 transition duration-300 transform hover:-translate-y-1"
          >
            {isLoginMode ? 'Login' : 'Sign Up'}
          </button>
        </form>
        <p className="mt-4 text-center text-sm text-gray-600">
          {isLoginMode ? "Don't have an account?" : "Already have an account?"}
          <span
            onClick={() => {
              setIsLoginMode(!isLoginMode);
              setMessage('');
              setEmail('');
              setPassword('');
              setConfirmPassword('');
            }}
            className="font-semibold text-blue-600 cursor-pointer hover:text-blue-500 ml-1 transition-colors duration-200"
          >
            {isLoginMode ? 'Sign Up' : 'Login'}
          </span>
        </p>
      </div>
    </div>
  );
}

// Navigation Header Component
function Header({ categories, activeCategory, setActiveCategory, onNavigate, cartItemCount }) {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  return (
    <header className="sticky top-0 z-50 bg-white shadow-lg">
      <div className="container mx-auto px-4 py-4 flex justify-between items-center">
        {/* Logo */}
        <div className="text-2xl font-extrabold text-slate-800 cursor-pointer" onClick={() => onNavigate('home')}>
          Cloth Shop
        </div>

        {/* Desktop Navigation */}
        <nav className="hidden lg:flex items-center space-x-8">
          <button
            onClick={() => onNavigate('home')}
            className="text-gray-600 hover:text-gray-900 transition-colors duration-200 text-lg font-medium"
          >
            Home
          </button>
          {Object.keys(categories).map((categoryName) => (
            <div
              key={categoryName}
              onMouseEnter={() => setActiveCategory(categoryName)}
              onMouseLeave={() => setActiveCategory(null)}
              className="relative"
            >
              <a href="#" className="text-gray-600 hover:text-gray-900 transition-colors duration-200 text-lg font-medium">
                {categoryName}
              </a>
              {/* Dropdown Menu with scrollbar */}
              {activeCategory === categoryName && (
                <div className="absolute left-0 top-full mt-2 w-48 bg-white rounded-lg shadow-xl py-2 z-10 max-h-60 overflow-y-auto">
                  {categories[categoryName].map((item) => (
                    <a
                      key={item}
                      href="#"
                      // Update the navigation logic to use the onNavigate prop
                      onClick={() => onNavigate('products', item)}
                      className="block px-4 py-2 text-gray-700 hover:bg-slate-100 transition-colors duration-200"
                    >
                      {item}
                    </a>
                  ))}
                </div>
              )}
            </div>
          ))}
        </nav>

        {/* Icons */}
        <div className="flex items-center space-x-4">
          <button 
            onClick={() => onNavigate('cart')}
            className="relative p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200"
          >
            {/* Cart Icon (Lucide React equivalent, using SVG for self-containment) */}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="lucide lucide-shopping-cart"
            >
              <circle cx="8" cy="21" r="1" />
              <circle cx="19" cy="21" r="1" />
              <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
            </svg>
            <span className="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">
              {cartItemCount}
            </span>
          </button>
          {/* Mobile menu button */}
          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="lg:hidden p-2 text-gray-600 hover:text-gray-900 transition-colors duration-200"
          >
            {/* Menu Icon */}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="lucide lucide-menu"
            >
              <line x1="4" x2="20" y1="12" y2="12" />
              <line x1="4" x2="20" y1="6" y2="6" />
              <line x1="4" x2="20" y1="18" y2="18" />
            </svg>
          </button>
        </div>
      </div>
      {/* Mobile Menu */}
      {isMobileMenuOpen && (
        <nav className="lg:hidden bg-white shadow-lg pb-4">
          <div className="flex flex-col items-center">
            <button
              onClick={() => { onNavigate('home'); setIsMobileMenuOpen(false); }}
              className="w-full py-2 px-4 text-center text-lg font-medium text-gray-600 hover:bg-slate-100 transition-colors duration-200"
            >
              Home
            </button>
            {Object.keys(categories).map((categoryName) => (
              <div key={categoryName} className="w-full">
                <button
                  onClick={() => setActiveCategory(activeCategory === categoryName ? null : categoryName)}
                  className="w-full py-2 px-4 text-center text-lg font-medium text-gray-600 hover:bg-slate-100 transition-colors duration-200"
                >
                  {categoryName}
                </button>
                {activeCategory === categoryName && (
                  <div className="flex flex-col items-center bg-gray-50 max-h-60 overflow-y-auto">
                    {categories[categoryName].map((item) => (
                      <a
                        key={item}
                        href="#"
                        onClick={() => { onNavigate('products', item); setIsMobileMenuOpen(false); }}
                        className="block px-4 py-2 text-gray-700 hover:bg-slate-200 transition-colors duration-200"
                      >
                        {item}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        </nav>
      )}
    </header>
  );
}

// Home Page Component
function HomePage({ products, handleNavigation, addToCart }) {
  const mensWear = products.filter(p => p.category === 'Men');
  const trendingItems = [...products].sort(() => 0.5 - Math.random()).slice(0, 4);

  return (
    <>
      <HeroSection handleNavigation={handleNavigation} />

      {/* New section for Men's New Arrivals */}
      <section className="container mx-auto px-4 py-12">
        <h2 className="text-3xl font-bold text-center mb-8 text-slate-800">
          Men's New Arrivals
        </h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {mensWear.map(product => (
            <ProductCard key={product.id} product={product} addToCart={addToCart} />
          ))}
        </div>
      </section>

      {/* Existing Featured Products section, now with more variety */}
      <FeaturedProducts products={products} addToCart={addToCart} />

      {/* New section for Trending items */}
      <section className="container mx-auto px-4 py-12 bg-slate-100 rounded-xl shadow-inner">
        <h2 className="text-3xl font-bold text-center mb-8 text-slate-800">
          Trending Now
        </h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {trendingItems.map(product => (
            <ProductCard key={product.id} product={product} addToCart={addToCart} />
          ))}
        </div>
      </section>
    </>
  );
}

// Product List Page Component
function ProductListPage({ products, title, addToCart }) {
  return (
    <section className="container mx-auto px-4 py-12">
      <h2 className="text-3xl font-bold text-center mb-8 text-slate-800">
        {title}
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {products.map(product => (
          <ProductCard key={product.id} product={product} addToCart={addToCart} />
        ))}
      </div>
    </section>
  );
}

// Cart Page Component
function CartPage({ cartItems, removeFromCart, updateQuantity, handleNavigation }) {
  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  return (
    <section className="container mx-auto px-4 py-12">
      <h2 className="text-3xl font-bold text-center mb-8 text-slate-800">Shopping Cart</h2>
      {cartItems.length === 0 ? (
        <p className="text-center text-gray-500">Your cart is empty.</p>
      ) : (
        <div className="bg-white rounded-xl shadow-lg overflow-hidden p-6">
          <ul className="divide-y divide-gray-200">
            {cartItems.map(item => (
              <li key={item.id} className="flex flex-col sm:flex-row items-center py-4">
                <img src={item.image} alt={item.name} className="w-24 h-24 object-cover rounded-md flex-shrink-0" />
                <div className="flex-1 mt-4 sm:mt-0 sm:ml-6">
                  <h3 className="text-lg font-semibold text-slate-800">{item.name}</h3>
                  <p className="text-gray-600">${item.price.toFixed(2)}</p>
                </div>
                <div className="flex items-center mt-4 sm:mt-0">
                  <button
                    onClick={() => updateQuantity(item.id, item.quantity - 1)}
                    className="px-3 py-1 bg-gray-200 text-gray-800 rounded-l-md font-bold hover:bg-gray-300 transition-colors"
                  >
                    -
                  </button>
                  <span className="px-4 py-1 bg-gray-100 text-gray-800 font-medium">
                    {item.quantity}
                  </span>
                  <button
                    onClick={() => updateQuantity(item.id, item.quantity + 1)}
                    className="px-3 py-1 bg-gray-200 text-gray-800 rounded-r-md font-bold hover:bg-gray-300 transition-colors"
                  >
                    +
                  </button>
                </div>
                <div className="text-lg font-semibold text-slate-800 mt-4 sm:mt-0 sm:ml-6 w-32 text-right">
                  ${(item.price * item.quantity).toFixed(2)}
                </div>
                <button
                  onClick={() => removeFromCart(item.id)}
                  className="mt-4 sm:mt-0 sm:ml-6 text-red-500 hover:text-red-700 transition-colors"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-x-circle"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>
                </button>
              </li>
            ))}
          </ul>
          <div className="flex justify-between items-center pt-6 mt-6 border-t border-gray-200">
            <h3 className="text-2xl font-bold text-slate-800">Total</h3>
            <span className="text-2xl font-bold text-slate-800">${total.toFixed(2)}</span>
          </div>
          <div className="flex justify-end mt-6">
            <button
              onClick={() => handleNavigation('checkout')}
              className="px-8 py-3 bg-slate-800 text-white rounded-lg font-semibold shadow-lg hover:bg-slate-700 transition-transform duration-300 transform hover:-translate-y-1"
            >
              Proceed to Checkout
            </button>
          </div>
        </div>
      )}
    </section>
  );
}

// Checkout Page Component
function CheckoutPage({ cartItems, onPlaceOrder }) {
  const [paymentMethod, setPaymentMethod] = useState('credit_card');
  const [isOrdering, setIsOrdering] = useState(false);
  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const handleSubmit = (e) => {
    e.preventDefault();
    setIsOrdering(true);

    // Simulate an order placement delay
    setTimeout(() => {
      onPlaceOrder();
      setIsOrdering(false);
    }, 2000);
  };

  return (
    <section className="container mx-auto px-4 py-12">
      <h2 className="text-3xl font-bold text-center mb-8 text-slate-800">Checkout</h2>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Order Summary */}
        <div className="lg:col-span-1 bg-white p-6 rounded-xl shadow-lg">
          <h3 className="text-2xl font-bold text-slate-800 mb-4">Order Summary</h3>
          <ul className="divide-y divide-gray-200">
            {cartItems.map(item => (
              <li key={item.id} className="flex justify-between items-center py-2">
                <span className="text-gray-600">{item.name} (x{item.quantity})</span>
                <span className="font-medium text-slate-800">${(item.price * item.quantity).toFixed(2)}</span>
              </li>
            ))}
          </ul>
          <div className="flex justify-between items-center pt-4 mt-4 border-t border-gray-200">
            <h3 className="text-xl font-bold text-slate-800">Total</h3>
            <span className="text-xl font-bold text-slate-800">${total.toFixed(2)}</span>
          </div>
        </div>
        {/* Checkout Form */}
        <div className="lg:col-span-2 bg-white p-6 rounded-xl shadow-lg">
          <h3 className="text-2xl font-bold text-slate-800 mb-4">Shipping & Payment</h3>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <h4 className="font-semibold text-lg text-slate-800 mb-2">Shipping Address</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input type="text" placeholder="Full Name" required className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                <input type="text" placeholder="Address Line 1" required className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                <input type="text" placeholder="City" required className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                <input type="text" placeholder="State / Province" required className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                <input type="text" placeholder="Zip / Postal Code" required className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
                <input type="text" placeholder="Country" required className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition duration-300" />
              </div>
            </div>
            <div>
              <h4 className="font-semibold text-lg text-slate-800 mb-2">Payment Method</h4>
              <div className="flex flex-col space-y-2">
                <label className="flex items-center space-x-2">
                  <input
                    type="radio"
                    name="payment"
                    value="credit_card"
                    checked={paymentMethod === 'credit_card'}
                    onChange={() => setPaymentMethod('credit_card')}
                    className="form-radio text-blue-600"
                  />
                  <span>Credit Card</span>
                </label>
                <label className="flex items-center space-x-2">
                  <input
                    type="radio"
                    name="payment"
                    value="paypal"
                    checked={paymentMethod === 'paypal'}
                    onChange={() => setPaymentMethod('paypal')}
                    className="form-radio text-blue-600"
                  />
                  <span>PayPal</span>
                </label>
                <label className="flex items-center space-x-2">
                  <input
                    type="radio"
                    name="payment"
                    value="qr_code"
                    checked={paymentMethod === 'qr_code'}
                    onChange={() => setPaymentMethod('qr_code')}
                    className="form-radio text-blue-600"
                  />
                  <span>QR Code</span>
                </label>
                <label className="flex items-center space-x-2">
                  <input
                    type="radio"
                    name="payment"
                    value="cash_on_delivery"
                    checked={paymentMethod === 'cash_on_delivery'}
                    onChange={() => setPaymentMethod('cash_on_delivery')}
                    className="form-radio text-blue-600"
                  />
                  <span>Cash on Delivery</span>
                </label>
              </div>
            </div>
            {paymentMethod === 'qr_code' && (
              <div className="flex flex-col items-center justify-center p-4 bg-gray-50 rounded-lg shadow-inner">
                <p className="text-gray-600 mb-4">Please scan the QR code to complete your payment.</p>
                <img src="https://i.imgur.com/uG90s4O.png" alt="QR Code" className="w-48 h-48 rounded-lg" />
              </div>
            )}
            <button
              type="submit"
              disabled={isOrdering}
              className="w-full py-3 mt-6 text-white font-semibold rounded-lg bg-slate-800 hover:bg-slate-700 focus:outline-none focus:ring-4 focus:ring-slate-500 transition duration-300 transform hover:-translate-y-1 disabled:bg-gray-400 disabled:transform-none"
            >
              {isOrdering ? 'Placing Order...' : 'Place Order'}
            </button>
          </form>
        </div>
      </div>

      {isOrdering && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-8 rounded-xl shadow-2xl text-center max-w-md w-full animate-bounce-in">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-green-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h3 className="text-2xl font-bold text-slate-800 mb-2">Order Placed!</h3>
            <p className="text-gray-600">Thank you for your purchase. We'll send you a confirmation email shortly.</p>
          </div>
        </div>
      )}
    </section>
  );
}

// Hero Banner Section
function HeroSection({ handleNavigation }) {
  return (
    <section className="relative w-full h-96 lg:h-[600px] flex items-center justify-center p-4 text-center bg-cover bg-center rounded-b-3xl overflow-hidden" style={{ backgroundImage: "url('https://images.unsplash.com/photo-1512436991641-6745cdb1723f?q=80&w=1920&auto=format&fit=crop')" }}>
      {/* Overlay to improve text readability */}
      <div className="absolute inset-0 bg-black opacity-30"></div>
      <div className="relative z-10 flex flex-col items-center text-white">
        <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold leading-tight drop-shadow-lg">
          Elevate Your Style
        </h1>
      </div>
    </section>
  );
}

// Featured Products Section
function FeaturedProducts({ products, addToCart }) {
  // A wider range of products to be featured
  const featuredProducts = products.filter(p => p.id === 1 || p.id === 4 || p.id === 7 || p.id === 9);

  return (
    <section className="container mx-auto px-4 py-12">
      <h2 className="text-3xl font-bold text-center mb-8 text-slate-800">
        Featured Collections
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {featuredProducts.map(product => (
          <ProductCard key={product.id} product={product} addToCart={addToCart} />
        ))}
      </div>
    </section>
  );
}

// Reusable Product Card Component
function ProductCard({ product, addToCart }) {
  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden transition-transform duration-300 hover:scale-105 hover:shadow-2xl">
      <div className="relative overflow-hidden rounded-t-xl">
        <img
          src={product.image}
          alt={product.name}
          className="w-full h-80 object-cover"
        />
        <div className="absolute inset-0 bg-black bg-opacity-0 transition-opacity duration-300 hover:bg-opacity-10"></div>
      </div>
      <div className="p-5 text-center">
        <h3 className="text-lg font-semibold text-slate-800 mb-1">{product.name}</h3>
        <p className="text-gray-600 mb-4">${product.price.toFixed(2)}</p>
        <button 
          onClick={() => addToCart(product)}
          className="w-full py-2 px-4 bg-slate-800 text-white font-medium rounded-lg hover:bg-slate-700 focus:outline-none focus:ring-4 focus:ring-slate-500 transition-colors duration-300"
        >
          Add to Cart
        </button>
      </div>
    </div>
  );
}
